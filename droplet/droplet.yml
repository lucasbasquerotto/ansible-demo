- hosts: main
  vars_files: 
    - env.yml
  vars:
    api_token: "{{ env.DO_TOKEN }}"
    domain: "{{ env.DOMAIN }}"
    host_user: "{{ env.HOST_USER_NAME }}"
    host_pass: "{{ env.HOST_USER_PASS }}"
    host_ssh_public_key: "{{ env.SSH_PUBLIC_KEY }}"
    host_vars: 
      domain: "{{ domain }}"
      host_user: "{{ host_user }}"
      host_pass: "{{ host_pass }}"
      host_ssh_public_key: "{{ host_ssh_public_key }}")
    host_user_data: "{{ lookup('template', 'user_data.j2', template_vars=dict(host_vars)) | trim }}"
    do_tags:      
    - host
    - test-do
    droplets:
    - { id: '001', name: 'kube-001', state: present }
    - { id: '002', name: 'kube-002', state: present }
    - { id: '003', name: 'kube-003', state: present }
  tasks:
  - name: verify if variables are defined
    fail: 
      msg: "Variable '{{ item }}' is not defined"
    when: item is undefined or item == ""
    with_items:
    - "{{ api_token }}" 
    - "{{ domain }}" 
    - "{{ host_user }}" 
    - "{{ host_pass }}" 
    - "{{ host_user }}" 
    - "{{ host_ssh_public_key }}" 
    - "{{ host_user_data }}" 
      
  - name: create tags
    digital_ocean_tag:
      api_token: "{{ api_token }}"
      name: "{{ item }}"
      state: present
    with_items:
    - "{{ do_tags }}"

  - name: create droplets
    digital_ocean:
      api_token: "{{ api_token }}"
      id: "{{ item.id }}"
      name: "{{ item.name }}"
      unique_name: yes
      state: "{{ item.state }}"
      command: droplet
      size_id: 1gb
      region_id: nyc1
      image_id: ubuntu-18-04-x64
      private_networking: yes
      ipv6 : yes
      user_data: "{{ host_user_data }}"
      wait_timeout: 500
    with_items:
    - "{{ droplets }}"
    loop_control:
      label: "{{ item.name }}"
    register: droplet_details

  - debug: msg="IP of droplet {{ item.droplet.name }} ({{ item.droplet.id }}) is {{ item.droplet.ip_address }}"
    with_items: droplet_details.results
    loop_control:
      label: "{{ item.droplet.name }}"

  - name: tag each droplet
    digital_ocean_tag:
      api_token: "{{ api_token }}"
      resource_id: "{{ item[0].droplet.id }}"
      name: "{{ item[1] }}"
      state: present
    with_nested:
    - "{{ droplet_details.results }}"
    - "{{ do_tags }}"

  - name: create a domain record for each corresponding droplet
    digital_ocean_domain:
      state: present
      name: "{{ item.droplet.name }}.internal.{{ domain }}"
      ip: "{{ item.droplet.ip_address }}"
    with_items:
    - "{{ droplet_details.results }}"