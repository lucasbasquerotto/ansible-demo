- name: check file "/home/{{ host_user }}/.kube/config" exists
  stat:
    path: "/home/{{ host_user }}/.kube/config"
  register: tmp_file
  
- set_fact:
    run_tasks: "{{ (tmp_file is not defined) or (tmp_file.stat.exists == False) }}"

- name: create /var/log/kube directory
  become: true
  file:
    path: "/var/log/kube"
    state: directory
    mode: 0755
    owner: "{{ host_user }}"
    group: "{{ host_user }}"

- name: Set "/proc/sys/net/bridge/bridge-nf-call-iptables" if needed
  become: true
  shell: sysctl net.bridge.bridge-nf-call-iptables={{ bridge_nf_call_iptables }}
  when: run_tasks and (bridge_nf_call_iptables is defined) and (bridge_nf_call_iptables != "")
  
- name: initialize the cluster
  become: true
  shell: kubeadm init {{ kubeadm_init_params | default('') }} >> /var/log/kube/cluster_initialized.log
  when: run_tasks

- name: create .kube directory
  file:
    path: "/home/{{ host_user }}/.kube"
    state: directory
    mode: 0755
    owner: "{{ host_user }}"
  when: run_tasks

- name: copy admin.conf to user's kube config
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ host_user }}/.kube/config"
    remote_src: yes
    owner: "{{ host_user }}"
  when: run_tasks

- name: Creates the "/home/{{ host_user }}/tmp" directory
  file:
    path: "/home/{{ host_user }}/tmp"
    state: directory

- name: copy the kube network files to the host
  template:
    src: "{{ kube_network_directory }}/{{ item }}"
    dest: "/home/{{ host_user }}/tmp/{{ item }}"
    mode: 0644
    owner: "{{ host_user }}"
  vars: 
    file_env:
      kube_etcd_endpoints: "{{ kube_etcd_endpoints }}"
      pod_cidr: "{{ pod_cidr }}"
  with_items:
  - "{{ kube_network_files }}"

- name: install Pod network
  shell: kubectl apply --filename "/home/{{ host_user }}/tmp/{{ item }}"
  with_items:
  - "{{ kube_network_files }}"