- name: Play 01 - Create droplets and define hosts
  hosts: main
  vars_files: 
    - /home/main/env/env.yml
  vars:
    hosts_file: "/home/main/ansible/hosts"
    api_token: "{{ env.DO_TOKEN }}"
    domain: "{{ env.DOMAIN }}"
    host_user: "{{ env.HOST_USER_NAME }}"
    host_pass: "{{ env.HOST_USER_PASS }}"
    host_ssh_public_key: "{{ env.SSH_PUBLIC_KEY }}"
    host_vars: 
      domain: "{{ domain }}"
      host_user: "{{ host_user }}"
      host_pass: "{{ host_pass }}"
      host_ssh_public_key: "{{ host_ssh_public_key }}"
    host_user_data: "{{ lookup('template', 'user_data.j2', template_vars=dict(host_vars)) | trim }}"
    do_tags:      
    - host
    - test-do
    droplets:
    - { id: '001', name: 'kube-001', state: present }
    - { id: '002', name: 'kube-002', state: present }
    - { id: '003', name: 'kube-003', state: present }
    - { id: '004', name: 'kube-004', state: deleted }
  tasks:
  - name: verify if variables are defined
    fail: 
      msg: "Variable '{{ item.name }}' is not defined"
    when: item.value is undefined or item.value == ""
    with_items:
    - { name: "api_token", value: "{{ api_token }}"}
    - { name: "domain", value: "{{ domain }}"}
    - { name: "host_user", value: "{{ host_user }}"}
    - { name: "host_pass", value: "{{ host_pass }}"}
    - { name: "host_user", value: "{{ host_user }}"}
    - { name: "host_ssh_public_key", value: "{{ host_ssh_public_key }}"}
    - { name: "host_user_data", value: "{{ host_user_data }}"}
    loop_control:
      label: "{{ item.name }}"
      
  - name: create tags
    digital_ocean_tag:
      api_token: "{{ api_token }}"
      name: "{{ item }}"
      state: present
    with_items:
    - "{{ do_tags }}"

  - name: create droplets
    digital_ocean:
      api_token: "{{ api_token }}"
      id: "{{ item.id }}"
      name: "{{ item.name }}"
      unique_name: yes
      state: "{{ item.state }}"
      command: droplet
      size_id: 1gb
      region_id: nyc1
      image_id: ubuntu-18-04-x64
      private_networking: yes
      ipv6 : yes
      user_data: "{{ host_user_data }}"
      wait_timeout: 500
    with_items:
    - "{{ droplets }}"
    loop_control:
      label: "{{ item.name }}"
    register: droplet_details

  - name: Define value of active_droplets
    set_fact: active_droplets="{{ droplet_details.results | selectattr('droplet', 'defined') | map(attribute='droplet') | list }}"

  - debug: msg="IP of droplet {{ item.name }} is {{ item.ip_address }}"
    with_items: 
    - "{{ active_droplets }}"
    loop_control:
      label: "{{ item.name }}"

  - name: tag each droplet
    digital_ocean_tag:
      api_token: "{{ api_token }}"
      resource_id: "{{ item[0].id }}"
      name: "{{ item[1] }}"
      state: present
    with_nested:
    - "{{ active_droplets }}"
    - "{{ do_tags }}"
    loop_control:
      label: "droplet: {{ item[0].name }} - tag: {{ item[1] }}"

  - name: Generate hosts to populate the hosts file
    set_fact: 
      masters: |
        {{ masters | default('') }}
        {{ item.name }} ansible_host={{ item.ip_address }} ansible_user={{ host_user }} ansible_become_pass={{ host_pass }}
    with_items: 
    - "{{ active_droplets }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Update the hosts file with the generated hosts
    blockinfile:
      path: "{{ hosts_file }}"
      marker: "# {mark} ANSIBLE MANAGED BLOCK - MASTERS"
      insertafter: "[masters]"
      block: "{{ masters }}"

  - name: refresh inventory
    meta: refresh_inventory

- name: Play 02 - Update hosts configuration
  hosts: masters
  gather_facts: no
  vars:
    log_file: "/var/log/setup.log"
    setup_last_line: "Setup Finished"
  tasks:
  - name: Wait 60 seconds for target connection to become reachable/usable
    wait_for_connection:
      connect_timeout: 5
      delay: 0
      sleep: 1
      timeout: 60

  - name: Gathering facts
    setup:

  - name: Make sure the file /usr/bin/python is present
    wait_for:
      connect_timeout: 5
      delay: 0
      sleep: 1
      timeout: 60
      path: /usr/bin/python
      state: present
      msg: Timeout to find file /usr/bin/python

  - name: Make sure the file {{ log_file }} is present
    wait_for:
      connect_timeout: 5
      delay: 0
      sleep: 1
      timeout: 10
      path: "{{ log_file }}"
      state: present
      msg: Timeout to find file {{ log_file }}

  - name: Make sure the file {{ log_file }} has "{{ setup_last_line }}" in it
    wait_for:
      connect_timeout: 5
      delay: 0
      sleep: 1
      timeout: 60
      path: "{{ log_file }}"
      search_regex: "{{ setup_last_line }}"
      msg: Timeout to find "{{ setup_last_line }}" inside file {{ log_file }}

  - name: retrieve last line of {{ log_file }}
    shell: tail -n 1 {{ log_file }}
    register: last_line

  - name: Update variable last_line
    set_fact: last_line="{{ last_line.stdout }}"

  - debug: msg="last_line='{{ last_line }}'"
    
  - name: verify if the setup was finished successfully
    fail: 
      msg: "Variable '{{ last_line }}' should be equal to '{{ setup_last_line }}'"
    when: last_line != setup_last_line